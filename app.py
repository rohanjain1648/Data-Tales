# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ENYUMpC5SjIcIJ9Dwb7olbAty_0JMMWH
"""

import gradio as gr
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import joblib

# Load Dataset
reviews_df = pd.read_csv("Reviews_dataset.csv")

# Text Preprocessing
def preprocess_text(text):
    import re
    from nltk.corpus import stopwords
    from nltk.stem import WordNetLemmatizer
    text = text.lower()
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    words = text.split()
    stop_words = set(stopwords.words('english'))
    lemmatizer = WordNetLemmatizer()
    words = [lemmatizer.lemmatize(word) for word in words if word not in stop_words]
    return ' '.join(words)

# Preprocess reviews
reviews_df['cleaned_review'] = reviews_df['review_text'].apply(preprocess_text)

# Vectorization
vectorizer = TfidfVectorizer(max_features=5000, ngram_range=(1, 3))
X = vectorizer.fit_transform(reviews_df['cleaned_review'])
y = reviews_df['sentiment']

# Train Model
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestClassifier(n_estimators=200)
model.fit(X_train, y_train)

# Save Model and Vectorizer
joblib.dump(model, "model.pkl")
joblib.dump(vectorizer, "vectorizer.pkl")

# Gradio Interface
def predict_sentiment(text):
    model = joblib.load("model.pkl")
    vectorizer = joblib.load("vectorizer.pkl")

    text_clean = preprocess_text(text)
    vector = vectorizer.transform([text_clean])
    sentiment = model.predict(vector)[0]
    return sentiment

iface = gr.Interface(fn=predict_sentiment, inputs="text", outputs="label", title="Movie Sentiment Predictor")
iface.launch()